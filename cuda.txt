#include <iostream>
#include <cuda_runtime.h>

__global__ void addVectors(int* A, int* B, int* C, int n)
{
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n)
    {
        C[i] = A[i] + B[i];
    }
}

int main()
{
    int n = 1000000;
    int size = n * sizeof(int);

    // Allocate memory on the host
    int* A, * B, * C;
    cudaMallocHost(&A, size);  
    cudaMallocHost(&B, size);  
    cudaMallocHost(&C, size);

    // Initialize the vectors
    for (int i = 0; i < n; i++)
    {
        A[i] = i;
        B[i] = i * 2;
    }

    // Allocate memory on the device
    int* dev_A, * dev_B, * dev_C;
    cudaMalloc(&dev_A, size);  
    cudaMalloc(&dev_B, size);  
    cudaMalloc(&dev_C, size);

    // Copy data from host to device
    cudaMemcpy(dev_A, A, size, cudaMemcpyHostToDevice);
    cudaMemcpy(dev_B, B, size, cudaMemcpyHostToDevice);

    // Launch the kernel
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;
    addVectors<<<numBlocks, blockSize>>>(dev_A, dev_B, dev_C, n);

    // Copy result back to host
    cudaMemcpy(C, dev_C, size, cudaMemcpyDeviceToHost);

    // Print the first 10 results
    std::cout << "First 10 results of vector addition (A[i] + B[i]):" << std::endl;
    for (int i = 0; i < 10; i++)
    {
        std::cout << "C[" << i << "] = " << C[i] << std::endl;
    }

    // Free memory
    cudaFree(dev_A);  
    cudaFree(dev_B);  
    cudaFree(dev_C);  
    cudaFreeHost(A);  
    cudaFreeHost(B);  
    cudaFreeHost(C);

    return 0;
}

OUTPUT:
First 10 results of vector addition (A[i] + B[i]):
C[0] = 0
C[1] = 3
C[2] = 6
C[3] = 9
C[4] = 12
C[5] = 15
C[6] = 18
C[7] = 21
C[8] = 24
C[9] = 27



#include <iostream>
#include <omp.h>
using namespace std;

int main()
{
    int n;
    cout << "\nEnter the size of the square matrices (e.g. 3 for 3x3): ";
    cin >> n;

    float A[n][n], B[n][n], C[n][n];

    cout << "\nEnter elements of Matrix A:\n";
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            cin >> A[i][j];

    cout << "\nEnter elements of Matrix B:\n";
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            cin >> B[i][j];

// Initialize result matrix C to zero
#pragma omp parallel for collapse(2)
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            C[i][j] = 0;

    double start = omp_get_wtime();

// Matrix multiplication using OpenMP
#pragma omp parallel for collapse(2)
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            for (int k = 0; k < n; k++)
                C[i][j] += A[i][k] * B[k][j];

    double end = omp_get_wtime();

    cout << "\nResultant Matrix C = A x B:\n";
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
            cout << C[i][j] << "\t";
        cout << endl;
    }

    cout << "\n Matrix multiplication done using OpenMP.";
    cout << "\n Time taken: " << end - start << " seconds\n";

    return 0;
}

// Run Commands:
// g++ -fopenmp -o hpc_ml 7_HPC_application_for_AI-ML_domain.cpp
// .\hpc_ml

//****Output Example:****

// Enter the size of the square matrices (e.g. 3 for 3x3): 2

// Enter elements of Matrix A:
// 1 2
// 3 4

// Enter elements of Matrix B:
// 5 6
// 7 8

// Resultant Matrix C = A x B:
// 19      22
// 43      50

// Matrix multiplication done using OpenMP.
// Time taken: 0 seconds

OUTPUT:

Enter the size of the square matrices (e.g. 3 for 3x3): 2

Enter elements of Matrix A:
1 2
3 4

Enter elements of Matrix B:
5 6
7 8

Resultant Matrix C = A x B:
19	22
43	50

 Matrix multiplication done using OpenMP.
 Time taken: 0 seconds
