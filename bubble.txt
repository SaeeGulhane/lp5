#include <iostream>
#include <cstdlib>
#include <ctime>
#include <omp.h>
using namespace std;

// Sequential Bubble Sort
void bubbleSequential(int* a, int n) {
    for (int i = 0; i < n-1; i++) {
        for (int j = 0; j < n-i-1; j++) {
            if (a[j] > a[j+1]) {
                int temp = a[j];
                a[j] = a[j+1];
                a[j+1] = temp;
            }
        }
    }
}

// Parallel Bubble Sort using Odd-Even Transposition
void bubbleParallel(int* a, int n) {
    for (int i = 0; i < n; i++) {
        int first = i % 2;

        #pragma omp parallel for
        for (int j = first; j < n - 1; j += 2) {
            if (a[j] > a[j+1]) {
                int temp = a[j];
                a[j] = a[j+1];
                a[j+1] = temp;
            }
        }
    }
}

// Display Array
void displayArray(int* a, int n) {
    for (int i = 0; i < n; i++)
        cout << a[i] << " ";
    cout << endl;
}

int main() {
    cout << "\n\nName: Saee Gulhane\nRoll No. 18 \t Div.B\n\n";

    int n;
    cout << "Enter total number of elements: ";
    cin >> n;

    int* arr1 = new int[n];
    int* arr2 = new int[n];

    cout << "Enter elements:\n";
    for (int i = 0; i < n; i++) {
        cin >> arr1[i];
        arr2[i] = arr1[i];  // Copy same input for parallel
    }

    double start, end;

    // Sequential Bubble Sort
    start = omp_get_wtime();
    bubbleSequential(arr1, n);
    end = omp_get_wtime();
    cout << "\nSequential Bubble Sort Time: " << (end-start) << " seconds\n";

    // Parallel Bubble Sort
    start = omp_get_wtime();
    bubbleParallel(arr2, n);
    end = omp_get_wtime();
    cout << "Parallel Bubble Sort Time: " << (end-start) << " seconds\n";

    cout << "\nSorted Array:\n";
    displayArray(arr2, n);

    delete[] arr1;
    delete[] arr2;

    return 0;
}
