import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

from tensorflow.keras import models, layers

import warnings
warnings.filterwarnings("ignore")

fashion_mnist = tf.keras.datasets.fashion_mnist
(X_train, y_train), (X_test, y_test) = fashion_mnist.load_data()

class_names = ['T-shirt', 'Trouser', 'Pullover', 'Dress', 'Coat', 
               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']

print("Training data shape:", X_train.shape)
print("Testing data shape:", X_test.shape)
print("Unique classes:", np.unique(y_train))

plt.figure(figsize=(9, 4))
sns.countplot(x=y_train)
plt.title("Class Distribution in Training Set")
plt.xticks(ticks=np.arange(10), labels=class_names, rotation=45)
plt.xlabel("Clothing Category")
plt.ylabel("Count")
plt.grid(axis='y')
plt.show()

plt.figure(figsize=(12, 5))
for i in range(10):
    plt.subplot(2, 5, i+1)
    plt.imshow(X_train[i], cmap="gray")
    plt.title(class_names[y_train[i]])
    plt.axis('off')
plt.tight_layout()
plt.show()

print(f"Pixel range: Min={X_train.min()}, Max={X_train.max()}")

X_train = X_train / 255.0
X_test = X_test / 255.0

model = models.Sequential([
    layers.Reshape((28, 28, 1), input_shape=(28, 28)),  # Reshape to (28, 28, 1) for CNN
    layers.Conv2D(32, (3, 3), activation='relu'),  # First Conv layer
    layers.MaxPooling2D((2, 2)),  # Pooling layer
    layers.Conv2D(64, (3, 3), activation='relu'),  # Second Conv layer
    layers.MaxPooling2D((2, 2)),  # Pooling layer
    layers.Flatten(),  # Flatten the output
    layers.Dense(10, activation='softmax')  # Output layer with 10 classes
])

model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

history = model.fit(X_train, y_train, epochs=5, validation_split=0.1)

test_loss, test_acc = model.evaluate(X_test, y_test)
print(f"\n Test Accuracy: {test_acc:.2f}")

predictions = model.predict(X_test)

plt.figure(figsize=(8,4))
plt.plot(history.history['accuracy'], label='train acc')
plt.plot(history.history['val_accuracy'], label='val acc')
plt.title("Model Accuracy over Epochs")
plt.xlabel("Epoch")
plt.ylabel("Accuracy")
plt.legend()
plt.grid(True)
plt.show()

def plot_image(i, predictions_array, true_label, img):
    plt.grid(False)
    plt.xticks([])
    plt.yticks([])
    plt.imshow(img, cmap=plt.cm.binary)

    pred_label = np.argmax(predictions_array)
    color = 'blue' if pred_label == true_label else 'red'
    
    plt.xlabel(f"{class_names[pred_label]} ({class_names[true_label]})", color=color)

plt.figure(figsize=(10, 5))
for i in range(5):
    plt.subplot(1, 5, i+1)
    plot_image(i, predictions[i], y_test[i], X_test[i])
plt.tight_layout()
plt.show()

import random
import matplotlib.pyplot as plt

# Pick a random image from the test set
i = random.randint(0, len(X_test) - 1)
img = X_test[i]
true_label = y_test[i]

# Reshape and predict
prediction = model.predict(np.expand_dims(img, axis=0))  # Shape becomes (1, 28, 28, 1)
predicted_label = np.argmax(prediction)

# Show the image with the predicted and true label
plt.figure(figsize=(4, 4))
plt.imshow(img, cmap='gray')
plt.title(f"True: {class_names[true_label]}\nPredicted: {class_names[predicted_label]}", 
          color='blue' if predicted_label == true_label else 'red')
plt.axis('off')
plt.show()
