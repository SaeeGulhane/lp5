import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from tensorflow.keras.utils import to_categorical

# Load dataset
column_names = ['letter', 'x-box', 'y-box', 'width', 'height', 'onpix', 'x-bar',
                'y-bar', 'x2bar', 'y2bar', 'xybar', 'x2ybr', 'xy2br', 'x-ege', 'xegvy', 'y-ege', 'yegvx']
data = pd.read_csv('letter-recognition.data', names=column_names)

# Separate features and labels
X = data.drop('letter', axis=1)
y = data['letter']

# Encode labels (A-Z) to integers (0-25)
label_encoder = LabelEncoder()
y_encoded = label_encoder.fit_transform(y)

plt.figure(figsize=(10,5))
sns.countplot(x='letter', data=data, order=sorted(data['letter'].unique()))
plt.title("Letter Class Distribution (A-Z)")
plt.xlabel("Letter")
plt.ylabel("Count")
plt.show()

data.drop('letter', axis=1).hist(bins=20, figsize=(12,10))
plt.suptitle("Histogram of Features", fontsize=16)
plt.show()

sample_data = data[['x-box', 'y-box', 'width', 'height', 'onpix', 'letter']].sample(1000)
sns.pairplot(sample_data, hue='letter')
plt.suptitle("Pairplot of Sampled Features", y=1.02)
plt.show()

# Normalize features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Convert labels to one-hot
y_onehot = to_categorical(y_encoded, num_classes=26)

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y_onehot, test_size=0.2, random_state=42)

model = Sequential()
model.add(Dense(128, input_shape=(16,), activation='relu'))
model.add(Dropout(0.3))
model.add(Dense(64, activation='relu'))
model.add(Dropout(0.3))
model.add(Dense(26, activation='softmax'))  # 26 output classes

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
model.summary()

history = model.fit(X_train, y_train, epochs=30, batch_size=64, validation_split=0.2)

loss, accuracy = model.evaluate(X_test, y_test)
print(f'Test Accuracy: {accuracy:.4f}')

import matplotlib.pyplot as plt

plt.figure(figsize=(12, 4))

plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='train acc')
plt.plot(history.history['val_accuracy'], label='val acc')
plt.title('Accuracy over epochs')
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='train loss')
plt.plot(history.history['val_loss'], label='val loss')
plt.title('Loss over epochs')
plt.legend()

plt.show()

# Predict and decode some samples
preds = model.predict(X_test[:10])
pred_labels = label_encoder.inverse_transform(np.argmax(preds, axis=1))
true_labels = label_encoder.inverse_transform(np.argmax(y_test[:10], axis=1))

print("Predicted:", pred_labels)
print("Actual:", true_labels)

