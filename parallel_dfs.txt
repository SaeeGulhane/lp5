#include <iostream>
#include <vector>
#include <stack>
#include <omp.h>
using namespace std;

const int MAX = 100000;
vector<int> graph[MAX];
bool visited[MAX];
omp_lock_t lock[MAX];

// Parallel DFS using a stack
void dfs(int start) {
    stack<int> s;
    s.push(start);

    while (!s.empty()) {
        int curr;

        #pragma omp critical
        {
            curr = s.top();
            s.pop();
        }

        omp_set_lock(&lock[curr]);
        if (!visited[curr]) {
            visited[curr] = true;
            cout << curr << " ";
        }
        omp_unset_lock(&lock[curr]);

        #pragma omp parallel for
        for (int i = 0; i < graph[curr].size(); i++) {
            int next = graph[curr][i];
            
            omp_set_lock(&lock[next]);
            if (!visited[next]) {
                #pragma omp critical
                {
                    s.push(next);
                }
            }
            omp_unset_lock(&lock[next]);
        }
    }
}

int main() {
    int n, m, start;
    cout << "\n\nName: Saee Gulhane\nRoll No.18 \t Div.B\n\n";
    cout << "Enter number of nodes, edges, and the starting node: ";
    cin >> n >> m >> start;

    cout << "Enter edges (u v):\n";
    for (int i = 0; i < m; i++) {
        int u, v;
        cin >> u >> v;
        graph[u].push_back(v);
        graph[v].push_back(u); // undirected graph
    }

    #pragma omp parallel for
    for (int i = 0; i < n; i++) {
        visited[i] = false;
        omp_init_lock(&lock[i]);
    }

    cout << "\nParallel DFS Traversal:\n";
    dfs(start);
    cout << endl;

    for (int i = 0; i < n; i++) {
        omp_destroy_lock(&lock[i]);
    }

    return 0;
}
