#include <iostream>
#include <omp.h>
#include <climits>
using namespace std;

// Find Minimum using Parallel Reduction
void findMin(int arr[], int n) {
    int minVal = INT_MAX;

    #pragma omp parallel for reduction(min:minVal)
    for (int i = 0; i < n; i++) {
        if (arr[i] < minVal) {
            minVal = arr[i];
        }
    }
    cout << "Minimum value: " << minVal << endl;
}

// Find Maximum using Parallel Reduction
void findMax(int arr[], int n) {
    int maxVal = INT_MIN;

    #pragma omp parallel for reduction(max:maxVal)
    for (int i = 0; i < n; i++) {
        if (arr[i] > maxVal) {
            maxVal = arr[i];
        }
    }
    cout << "Maximum value: " << maxVal << endl;
}

// Find Sum using Parallel Reduction
void findSum(int arr[], int n) {
    int sum = 0;

    #pragma omp parallel for reduction(+:sum)
    for (int i = 0; i < n; i++) {
        sum += arr[i];
    }
    cout << "Sum: " << sum << endl;
}

// Find Average using Parallel Reduction
void findAverage(int arr[], int n) {
    int sum = 0;

    #pragma omp parallel for reduction(+:sum)
    for (int i = 0; i < n; i++) {
        sum += arr[i];
    }

    double avg = (n > 0) ? static_cast<double>(sum) / n : 0;
    cout << "Average: " << avg << endl;
}

int main() {
    cout << "\n\nName: Saee Gulhane\nRoll No. 18 \t Div.B\n\n";

    int n;
    cout << "Enter total number of elements: ";
    cin >> n;

    if (n <= 0) {
        cout << "Invalid size. Exiting...\n";
        return 1;
    }

    int* arr = new int[n];

    cout << "Enter elements:\n";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    // Perform operations
    findMin(arr, n);
    findMax(arr, n);
    findSum(arr, n);
    findAverage(arr, n);

    delete[] arr;
    return 0;
}
